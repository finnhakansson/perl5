/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 118 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 3:
#line 122 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}
    break;

  case 4:
#line 128 "perly.y"
    {
			  parser->expect = XTERM;
			}
    break;

  case 5:
#line 132 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 6:
#line 137 "perly.y"
    {
			  parser->expect = XBLOCK;
			}
    break;

  case 7:
#line 141 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 8:
#line 149 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 9:
#line 153 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 10:
#line 161 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 11:
#line 165 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 12:
#line 173 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 13:
#line 177 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 14:
#line 185 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 15:
#line 193 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			}
    break;

  case 16:
#line 200 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }
    break;

  case 17:
#line 205 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 18:
#line 212 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }
    break;

  case 19:
#line 218 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 20:
#line 220 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 21:
#line 229 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 22:
#line 231 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 240 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			}
    break;

  case 24:
#line 244 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 25:
#line 248 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 26:
#line 252 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 27:
#line 259 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 28:
#line 261 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			}
    break;

  case 29:
#line 271 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}
    break;

  case 30:
#line 293 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 31:
#line 304 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}
    break;

  case 32:
#line 326 "perly.y"
    {
			  OP *body;
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(6) - (10)].val.opval), (ps[(9) - (10)].val.opval)));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (10)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 33:
#line 343 "perly.y"
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 34:
#line 350 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
    break;

  case 35:
#line 352 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 36:
#line 359 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 37:
#line 365 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
                              newCONDOP(0, (ps[(4) - (7)].val.opval), (ps[(7) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval))));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 38:
#line 371 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)), 0));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 39:
#line 376 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
    break;

  case 40:
#line 378 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
    break;

  case 41:
#line 380 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 42:
#line 387 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 43:
#line 394 "perly.y"
    { parser->expect = XTERM; }
    break;

  case 44:
#line 396 "perly.y"
    { parser->expect = XTERM; }
    break;

  case 45:
#line 399 "perly.y"
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			}
    break;

  case 46:
#line 414 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 47:
#line 419 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      op_lvalue((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 48:
#line 425 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(5) - (5)].val.opval)); }
    break;

  case 49:
#line 427 "perly.y"
    {
			  (yyval.opval) = block_end(
				(ps[(4) - (11)].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[(6) - (11)].val.opval)),
					    OP_ENTERLOOP),
					 (ps[(8) - (11)].val.opval), (ps[(10) - (11)].val.opval), (ps[(11) - (11)].val.opval))
			  );
			  parser->copline = (line_t)(ps[(1) - (11)].val.ival);
			}
    break;

  case 50:
#line 440 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[(3) - (9)].val.opval)),
					     OP_ENTERLOOP), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 51:
#line 448 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 52:
#line 454 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			}
    break;

  case 53:
#line 460 "perly.y"
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			}
    break;

  case 54:
#line 467 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			}
    break;

  case 55:
#line 475 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			}
    break;

  case 56:
#line 479 "perly.y"
    {
			  (yyval.opval) = (OP*)NULL;
			  parser->copline = NOLINE;
			}
    break;

  case 57:
#line 487 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}
    break;

  case 58:
#line 504 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 59:
#line 506 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
    break;

  case 60:
#line 511 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 61:
#line 513 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 62:
#line 515 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 63:
#line 517 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 64:
#line 519 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
    break;

  case 65:
#line 521 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 66:
#line 523 "perly.y"
    { (yyval.opval) = newFOROP(0, (OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
    break;

  case 67:
#line 526 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
    break;

  case 68:
#line 531 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 69:
#line 533 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			}
    break;

  case 70:
#line 538 "perly.y"
    { parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 71:
#line 548 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 72:
#line 550 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
    break;

  case 73:
#line 555 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
    break;

  case 74:
#line 561 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 76:
#line 567 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }
    break;

  case 78:
#line 575 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 79:
#line 580 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

  case 80:
#line 584 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

  case 81:
#line 587 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 82:
#line 588 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 83:
#line 592 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 84:
#line 598 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }
    break;

  case 85:
#line 603 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 88:
#line 614 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 90:
#line 620 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 91:
#line 622 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 92:
#line 624 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 93:
#line 629 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 94:
#line 631 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 95:
#line 642 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 96:
#line 644 "perly.y"
    {
                            (yyval.opval) = (ps[(1) - (1)].val.opval);
                            PL_parser->in_my = 0;
                        }
    break;

  case 97:
#line 652 "perly.y"
    { (yyval.ival) = '@'; }
    break;

  case 98:
#line 654 "perly.y"
    { (yyval.ival) = '%'; }
    break;

  case 99:
#line 658 "perly.y"
    {
                            I32 sigil = (ps[(1) - (3)].val.ival);
                            OP *var   = (ps[(2) - (3)].val.opval);
                            OP *defexpr = (ps[(3) - (3)].val.opval);
                            int type = (sigil == '@' ? OP_PADAV : OP_PADHV);

                            if (PL_parser->sig_slurpy)
                                yyerror("Multiple slurpy parameters not allowed");
                            PL_parser->sig_slurpy = sigil;

                            if (defexpr)
                                yyerror("a slurpy parameter may not have "
                                        "a default value");

                            if (var) {
                                OP *slice;

                                var->op_type    = type;
                                var->op_ppaddr  = PL_ppaddr[type];
                                var->op_flags   = (OPf_WANT_LIST | OPf_MOD);
                                var->op_private = OPpLVAL_INTRO;

                                slice = PL_parser->sig_elems
                                    ? op_prepend_elem(OP_ASLICE,
                                        newOP(OP_PUSHMARK, 0),
                                        newLISTOP(OP_ASLICE, 0,
                                            list(newRANGE(0,
                                                newSVOP(OP_CONST, 0,
                                                    newSViv(PL_parser->sig_elems)),
                                                newUNOP(OP_AV2ARYLEN, 0,
                                                    ref(newUNOP(OP_RV2AV, 0,
                                                            newGVOP(OP_GV, 0, PL_defgv)),
                                                        OP_AV2ARYLEN)))),
                                            ref(newUNOP(OP_RV2AV, 0,
                                                    newGVOP(OP_GV, 0, PL_defgv)),
                                                OP_ASLICE)))
                                    : newUNOP(OP_RV2AV, 0, newGVOP(OP_GV, 0, PL_defgv));
                                (yyval.opval) = newSTATEOP(0, NULL,
                                       newASSIGNOP(OPf_STACKED, var, 0, slice));
                            }
                            else
                                (yyval.opval) = (OP*)NULL;
                        }
    break;

  case 100:
#line 705 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 101:
#line 707 "perly.y"
    { (yyval.opval) = newOP(OP_NULL, 0); }
    break;

  case 102:
#line 709 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 103:
#line 715 "perly.y"
    {
                            OP *var     = (ps[(2) - (3)].val.opval);
                            OP *defexpr = (ps[(3) - (3)].val.opval);
                            OP *argn    = NULL;
                            OP *expr    = NULL;

                            if (PL_parser->sig_slurpy)
                                yyerror("Slurpy parameter not last");

                            PL_parser->sig_elems++;

                            if (var) {
                                var->op_type    = OP_PADSV;
                                var->op_ppaddr  = PL_ppaddr[OP_PADSV];
                                var->op_flags   = (OPf_WANT_SCALAR | OPf_MOD);
                                var->op_private = OPpLVAL_INTRO;
                            }

                            /* $_[N] */
                            argn = newBINOP(OP_AELEM, 0,
                                ref(newUNOP(OP_RV2AV, 0,
                                        newGVOP(OP_GV, 0, PL_defgv)),
                                    OP_RV2AV),
                                newSVOP(OP_CONST, 0,
                                    newSViv(PL_parser->sig_elems - 1)));

                            if (defexpr) {
                                PL_parser->sig_optelems++;
                                /* is it '$var=undef', '$=' ? */
                                if (    (   defexpr->op_type == OP_NULL
                                         || defexpr->op_type == OP_UNDEF)
                                    && !(defexpr->op_flags & OPf_KIDS))
                                {
                                    if (var) {
                                        /* '$=' is legal, '$var=' isn't */
                                        if (defexpr->op_type == OP_NULL)
                                            yyerror("Optional parameter "
                                                "lacks default expression");
                                        else
                                            expr = argn;
                                    }
                                    op_free(defexpr);
                                }
                                else {
                                    /* @_ >= N */
                                    OP *ge_op = 
                                        newBINOP(OP_GE, 0,
                                        scalar(newUNOP(OP_RV2AV, 0,
                                                newGVOP(OP_GV, 0, PL_defgv))),
                                        newSVOP(OP_CONST, 0,
                                            newSViv(PL_parser->sig_elems)));

                                    expr = var
                                        ? newCONDOP(0, ge_op, argn, defexpr)
                                        : newLOGOP(OP_OR, 0, ge_op, defexpr);
                                }
                            }
                            else {
                                if (PL_parser->sig_optelems)
                                    yyerror("Mandatory parameter "
                                            "follows optional parameter");
                                expr = argn;
                            }

                            if (var)
                                expr = newASSIGNOP(OPf_STACKED, var, 0, expr);
                            if (expr)
                                (yyval.opval) = op_prepend_elem(OP_LINESEQ,
                                        newSTATEOP(0, NULL, NULL),
                                        expr);
                            else
                                (yyval.opval) = (OP*)NULL;
                        }
    break;

  case 104:
#line 793 "perly.y"
    { parser->expect = XSIGVAR; (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 105:
#line 795 "perly.y"
    { parser->expect = XSIGVAR; (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 106:
#line 801 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
    break;

  case 107:
#line 803 "perly.y"
    {
			  (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			}
    break;

  case 108:
#line 807 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 109:
#line 812 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 110:
#line 814 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 111:
#line 818 "perly.y"
    {
                            ENTER;
                            SAVEINT(PL_parser->sig_elems);
                            SAVEINT(PL_parser->sig_optelems);
                            SAVEI8(PL_parser->sig_slurpy);
                            PL_parser->sig_elems    = 0;
                            PL_parser->sig_optelems = 0;
                            PL_parser->sig_slurpy   = 0;
                            parser->expect = XSIGVAR;
                        }
    break;

  case 112:
#line 830 "perly.y"
    {
                            OP *sigops = (ps[(3) - (4)].val.opval);
                            int min_arity =
                                PL_parser->sig_elems - PL_parser->sig_optelems;

                            assert(FEATURE_SIGNATURES_IS_ENABLED);

                            /* We shouldn't get here otherwise */
                            Perl_ck_warner_d(aTHX_
                                packWARN(WARN_EXPERIMENTAL__SIGNATURES),
                                "The signatures feature is experimental");

                            /* handle odd/even for %foo */
                            if (PL_parser->sig_slurpy == '%') {
                                OP *chkop =
                                    newLOGOP(
                                        (PL_parser->sig_elems & 1)
                                                ? OP_OR : OP_AND,
                                        0,
                                        newBINOP(OP_BIT_AND, 0,
                                            scalar(newUNOP(OP_RV2AV, 0,
                                                newGVOP(OP_GV, 0, PL_defgv))),
                                            newSVOP(OP_CONST, 0, newSViv(1))),
                                        op_convert_list(OP_DIE, 0,
                                            op_convert_list(OP_SPRINTF, 0,
                                                op_append_list(OP_LIST,
                                                    newSVOP(OP_CONST, 0,
                                                        newSVpvs("Odd name/value argument for subroutine at %s line %d.\n")),
                                                    newSLICEOP(0,
                                                        op_append_list(OP_LIST,
                                                            newSVOP(OP_CONST, 0, newSViv(1)),
                                                            newSVOP(OP_CONST, 0, newSViv(2))),
                                                        newOP(OP_CALLER, 0))))));
                                if (PL_parser->sig_optelems)
                                    chkop = newLOGOP(OP_AND, 0,
                                                newBINOP(OP_GT, 0,
                                                    scalar(newUNOP(OP_RV2AV, 0,
                                                        newGVOP(OP_GV, 0, PL_defgv))),
                                                    newSVOP(OP_CONST, 0,
                                                    newSViv(PL_parser->sig_elems))),
                                                chkop);
                                sigops = op_prepend_elem(OP_LINESEQ,
                                            chkop, sigops);

                            }
                            if (min_arity)
                                sigops = op_prepend_elem(OP_LINESEQ,
                                            Perl_check_arity(aTHX_ min_arity,
                                                FALSE),
                                            sigops);
                            if (!PL_parser->sig_slurpy)
                                sigops = op_prepend_elem(OP_LINESEQ,
                                            Perl_check_arity(aTHX_
                                                PL_parser->sig_elems, TRUE),
                                            sigops);

                            (yyval.opval) = op_append_elem(OP_LINESEQ, sigops,
                                newSTATEOP(0, NULL, NULL));

                            parser->expect = XATTRBLOCK;
                            LEAVE;
			}
    break;

  case 114:
#line 898 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 115:
#line 903 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 116:
#line 905 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 117:
#line 907 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 119:
#line 913 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
    break;

  case 120:
#line 915 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			}
    break;

  case 122:
#line 924 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			}
    break;

  case 123:
#line 928 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			}
    break;

  case 124:
#line 932 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			}
    break;

  case 125:
#line 938 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			}
    break;

  case 126:
#line 943 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			}
    break;

  case 127:
#line 949 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			}
    break;

  case 128:
#line 955 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 129:
#line 957 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 130:
#line 959 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); }
    break;

  case 131:
#line 962 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			}
    break;

  case 134:
#line 977 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
    break;

  case 135:
#line 979 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 136:
#line 982 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			}
    break;

  case 137:
#line 987 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 138:
#line 992 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			}
    break;

  case 139:
#line 995 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
    break;

  case 140:
#line 999 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
    break;

  case 141:
#line 1003 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval)))); }
    break;

  case 142:
#line 1006 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval))))); }
    break;

  case 143:
#line 1011 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval))))); }
    break;

  case 144:
#line 1015 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval)))); }
    break;

  case 145:
#line 1018 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
    break;

  case 146:
#line 1020 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
    break;

  case 147:
#line 1022 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL); }
    break;

  case 148:
#line 1027 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
    break;

  case 149:
#line 1029 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 150:
#line 1031 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
    break;

  case 151:
#line 1036 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 152:
#line 1038 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 153:
#line 1040 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 154:
#line 1042 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 155:
#line 1044 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 156:
#line 1046 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 157:
#line 1048 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 158:
#line 1050 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 159:
#line 1052 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 160:
#line 1054 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 161:
#line 1056 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 162:
#line 1061 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 163:
#line 1063 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 164:
#line 1066 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 165:
#line 1068 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 166:
#line 1070 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
    break;

  case 167:
#line 1073 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
    break;

  case 168:
#line 1076 "perly.y"
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			}
    break;

  case 169:
#line 1087 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
    break;

  case 170:
#line 1090 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
    break;

  case 171:
#line 1097 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
    break;

  case 172:
#line 1099 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);}
    break;

  case 173:
#line 1101 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
    break;

  case 174:
#line 1103 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL); }
    break;

  case 175:
#line 1105 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 176:
#line 1108 "perly.y"
    {
			  OP *body;
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval)));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
			}
    break;

  case 177:
#line 1122 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
    break;

  case 178:
#line 1124 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
    break;

  case 183:
#line 1132 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 184:
#line 1134 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 185:
#line 1136 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 186:
#line 1138 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
    break;

  case 187:
#line 1140 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

  case 188:
#line 1142 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 189:
#line 1144 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

  case 190:
#line 1146 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 191:
#line 1148 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 192:
#line 1150 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 193:
#line 1152 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 194:
#line 1154 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
    break;

  case 195:
#line 1156 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 196:
#line 1158 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 197:
#line 1168 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 198:
#line 1178 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 199:
#line 1188 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 200:
#line 1198 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 201:
#line 1200 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 202:
#line 1202 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
    break;

  case 203:
#line 1205 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			}
    break;

  case 204:
#line 1210 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			}
    break;

  case 205:
#line 1214 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 206:
#line 1216 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 207:
#line 1218 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 208:
#line 1220 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
    break;

  case 209:
#line 1223 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
    break;

  case 210:
#line 1225 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
    break;

  case 211:
#line 1228 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

  case 212:
#line 1230 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 213:
#line 1232 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

  case 214:
#line 1234 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 215:
#line 1236 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 216:
#line 1238 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
    break;

  case 217:
#line 1240 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 218:
#line 1242 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 219:
#line 1244 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
    break;

  case 220:
#line 1247 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

  case 221:
#line 1249 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
    break;

  case 222:
#line 1251 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 223:
#line 1253 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
    break;

  case 224:
#line 1255 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 225:
#line 1257 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
    break;

  case 226:
#line 1261 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 227:
#line 1263 "perly.y"
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}
    break;

  case 228:
#line 1274 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
    break;

  case 231:
#line 1278 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}
    break;

  case 233:
#line 1287 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
    break;

  case 234:
#line 1289 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
    break;

  case 235:
#line 1294 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

  case 236:
#line 1296 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

  case 237:
#line 1299 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 238:
#line 1301 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 239:
#line 1303 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 240:
#line 1308 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 241:
#line 1310 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 242:
#line 1314 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 243:
#line 1316 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 244:
#line 1320 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 245:
#line 1322 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 246:
#line 1328 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
    break;

  case 252:
#line 1341 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

  case 253:
#line 1345 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
    break;

  case 254:
#line 1349 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 255:
#line 1355 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 256:
#line 1361 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
    break;

  case 257:
#line 1363 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 258:
#line 1367 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
    break;

  case 260:
#line 1372 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
    break;

  case 262:
#line 1377 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
    break;

  case 264:
#line 1382 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
    break;

  case 265:
#line 1387 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

  case 266:
#line 1389 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

  case 267:
#line 1391 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
    break;

  case 268:
#line 1394 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

      default: break;
    

/* Generated from:
 * 288859a15f15c01d6c6c4e017cd343689a1b05849325665e6ff9e941c54e5673 perly.y
 * a4923588f219644801577c514014847e1e5240f49413fa3b89d3306fa4874d07 regen_perly.pl
 * ex: set ro: */
